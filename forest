#include <bits/stdc++.h>
using namespace std;
int solve(vector<char> &vec,int i){
    if(i>vec.size()||i<0||vec[i]=='w')
        return 0;
    vec[i] = 'w';
    int right{};
    
    int left{};
    right+= solve(vec,i+1);
    left+= solve(vec,i-1);
    return 1 + max(left,right);
}
int main()
{
    vector<char> forest = {'T','w','T','T','T','T','T','T','T','w'};
    
    cout<<solve(forest,7);
    
    // for(auto i:forest){
    //     cout<<i<<" ";
    // }
    return 0;
}



#include <bits/stdc++.h>
using namespace std;
int solve(vector<vector<char>> &vec,int i,int j,int n,int m){
    if(i>n-1||j>m-1||i<0||j<0||vec[i][j]=='w')
        return 0;
    vec[i][j] = 'w';
    int right{},left{},up{},down{},udl{},udr{},ldl{},ldr{};
    udl= solve(vec,i-1,j-1,n,m);
    udr= solve(vec,i-1,j+1,n,m);
    ldl= solve(vec,i+1,j-1,n,m);
    ldr= solve(vec,i+1,j+1,n,m);
    right= solve(vec,i,j+1,n,m);
    left= solve(vec,i,j-1,n,m);
    up= solve(vec,i-1,j,n,m);
    down= solve(vec,i+1,j,n,m);

    return 1 + max({left,right,up,down,udl,udr,ldl,ldr});
}
int main()
{
    vector<vector<char>> forest = {{'w','t','t','t','t','t'},
                                    {'t','w','w','w','w','w'},
                                    {'w','t','t','t','t','t'},
                                    {'w','w','w','w','w','t'},
                                    {'t','t','t','t','t','t'},
                                    {'t','w','w','w','w','w'}};
    int n = forest.size();
    int m = forest[0].size();
    // cout<<n<<" "<<m;
    int ans = solve(forest,0,5,n,m);
    cout<<ans;
    // for(auto i:forest){
    //     cout<<i<<" ";
    // }
    return 0;
}
